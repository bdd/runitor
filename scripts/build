#!/usr/bin/env bash
# Copyright (c) Berk D. Demir and the runitor contributors.
# SPDX-License-Identifier: 0BSD
set -euo pipefail

name="runitor"

# Allow specifying alternate working tree to build using main working tree scripts.
tld=$(git rev-parse --show-toplevel)
WORKTREE="${WORKTREE:-${tld}}"

# Allow specifying alternate BUILD_DIR for the unlikely case of the user
# actually knowing what they're doing.
BUILD_DIR="${BUILD_DIR:-"build"}"
mkdir -p "${BUILD_DIR}"

if [[ -n ${GOTOOLCHAIN-} ]]; then
  export GOTOOLCHAIN
fi

export CGO_ENABLED="${CGO_ENABLED-0}"

build() {
  go build -C "${WORKTREE}" -o "${BUILD_DIR}/" "./cmd/${name}"
}

mk_sha256() {
  local cmd
  local artifacts_file="$1"

  if type -p sha256sum >/dev/null; then
    # sha256sum(1) from coreutils.
    cmd=(sha256sum --tag)
  elif type -p shasum >/dev/null; then
    # shasum(1) in Perl; ships w/ macOS.
    cmd=(shasum -a 256 --tag)
  else
    exit 69 # EX_UNAVAILABLE
  fi

  # extend the command array with artifact names
  mapfile -t -O "${#cmd[@]}" cmd < "${artifacts_file}"

  (
    cd "$(dirname "${artifacts_file}")"
    "${cmd[@]}" | tee SHA256
  )
}

build_dist() {
  declare -a flags ldflags

  ldflags+=('-s')

  # embed version tag at link time
  local ver
  if ver=$(git -C "${WORKTREE}" describe --tags --match "v[0-9]*" --dirty); then
    ldflags+=('-X' "main.Version=${ver}")
  fi

  flags+=("-ldflags=${ldflags[*]}")

  # reproducible builds
  flags+=('-trimpath' '-buildvcs=false')

  local goos goarch
  goos=${GOOS:-$(go env GOOS)}
  goarch=${GOARCH:-$(go env GOARCH)}

  local fn_suffix=""
  if [[ ${goos} == "windows" ]]; then
    fn_suffix=".exe"
  fi

  local out="${BUILD_DIR}/${name}-${ver}-${goos}-${goarch}${fn_suffix}"
  env "CGO_ENABLED=${CGO_ENABLED}" go build -C "${WORKTREE}" "${flags[@]}" -o "${out}" "./cmd/${name}"
  echo "${out}"
}

build_dist_all() {
  # Possible past, present, and future values for GOOS and GOARCH:
  # https://github.com/golang/go/blob/master/src/go/build/syslist.go
  local platforms=(
    "linux-amd64"
    "linux-arm"
    "linux-arm64"
    "darwin-amd64"
    "darwin-arm64"
    "freebsd-amd64"
    "openbsd-amd64"
    "windows-amd64"
  )

  local artifacts_file="${BUILD_DIR}/.build-dist-all-artifacts"
  local oa plat
  for plat in "${platforms[@]}"; do
    oa=(${plat/-/ })
    GOOS="${oa[0]}" GOARCH="${oa[1]}" build_dist
  done \
    | xargs basename -a | tee "${artifacts_file}"

  mk_sha256 "${artifacts_file}"
}


case ${1-} in
  "") build ;;
  dist) build_dist ;;
  dist-all) build_dist_all ;;
  *)
    echo "usage: $0 [dist | dist-all]" >&2
    exit 1
    ;;
esac
