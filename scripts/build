#!/usr/bin/env bash
# Copyright (c) Berk D. Demir and the runitor contributors.
# SPDX-License-Identifier: 0BSD
set -euo pipefail

name="runitor"

# Allow specifying alternate working tree to build using main working tree scripts.
tld=$(git rev-parse --show-toplevel)
WORKTREE="${WORKTREE:-${tld}}"

# Allow specifying alternate BUILD_DIR for the unlikely case of the user
# actually knowing what they're doing.
BUILD_DIR="${BUILD_DIR:-"${WORKTREE}/build"}"
mkdir -p "${BUILD_DIR}"

# Allow specifying alternate Go version to be used for build.
#
# If desired version in `goX.Y.Z` is not in PATH, it's downloaded.
# Symbolic name "lastest" is resolved to latest Go version from a well-known
# URL.
#
# Go's executable install directory ($GOBIN -> $GOPATH/bin -> $HOME/go/bin)
# _must_ be in the PATH.
GO="${GO:-go}"
if [[ ${GO} != "go" ]]; then
  if [[ ${GO} == "latest" ]]; then
    GO=$(curl --proto '=https' --tlsv1.2 -LSsf 'https://go.dev/VERSION?m=text' | grep -E '^go[0-9.]+$')
  fi

  if [[ ${GO} == $(go env GOVERSION) ]]; then
    # wanted go version is the default go.
    GO=go
  elif ! type -p "${GO}"; then
    GOBIN=${GOBIN:-$(go env GOPATH | cut -d: -f1)/bin}
    go install "golang.org/dl/${GO}@latest"
    GO="${GOBIN}/${GO}"
    "${GO}" download
  fi
fi

CGO_ENABLED="CGO_ENABLED=${CGO_ENABLED:-0}"

build() {
  env ${CGO_ENABLED} ${GO} build -o "${BUILD_DIR}/" "${WORKTREE}/cmd/${name}"
}

mk_sha256() {
  local cmd
  local artifacts_file="$1"

  if type -p sha256sum >/dev/null; then
    # sha256sum(1) from coreutils.
    cmd=(sha256sum --tag)
  elif type -p shasum >/dev/null; then
    # shasum(1) in Perl; ships w/ macOS.
    cmd=(shasum -a 256 --tag)
  else
    exit 69 # EX_UNAVAILABLE
  fi

  # extend the command array with artifact names
  mapfile -t -O "${#cmd[@]}" cmd < "${artifacts_file}"

  (
    cd "$(dirname "${artifacts_file}")"
    "${cmd[@]}" | tee SHA256
  )
}

build_dist() {
  declare -a flags ldflags

  # -s: disable symbol table
  # -w: disable DWARF generation
  #     (-s implies -w everywhere but Darwin)
  ldflags+=('-s -w')

  # embed version tag at link time
  local ver
  if ver=$(git -C "${WORKTREE}" describe --tags --match "v[0-9]*" --dirty); then
    ldflags+=('-X' "main.Version=${ver}")
  fi

  flags+=("-ldflags=${ldflags[*]}")

  # reproducible builds
  flags+=('-trimpath' '-buildvcs=false')

  local goos goarch
  goos=${GOOS:-$(go env GOOS)}
  goarch=${GOARCH:-$(go env GOARCH)}

  local fn_suffix=""
  if [[ ${goos} == "windows" ]]; then
    fn_suffix=".exe"
  fi

  local out="${BUILD_DIR}/${name}-${ver}-${goos}-${goarch}${fn_suffix}"
  env "${CGO_ENABLED}" "${GO}" build "${flags[@]}" -o "${out}" ${WORKTREE}/cmd/${name}
  echo "${out}"
}

build_dist_all() {
  # Possible past, present, and future values for GOOS and GOARCH:
  # https://github.com/golang/go/blob/master/src/go/build/syslist.go
  local platforms=(
    "linux-amd64"
    "linux-arm"
    "linux-arm64"
    "darwin-amd64"
    "darwin-arm64"
    "freebsd-amd64"
    "openbsd-amd64"
    "windows-amd64"
  )

  local artifacts_file="${BUILD_DIR}/.build-dist-all-artifacts"
  local oa plat
  for plat in "${platforms[@]}"; do
    oa=(${plat/-/ })
    GOOS="${oa[0]}" GOARCH="${oa[1]}" build_dist
  done \
    | xargs basename -a | tee "${artifacts_file}"

  mk_sha256 "${artifacts_file}"
}


if (($# > 0)); then
  case $1 in
    dist) build_dist ;;
    dist-all) build_dist_all ;;
    *)
      echo "usage: $0 [dist | dist-all]" >&2
      exit 1
      ;;
  esac
else
  build
fi
