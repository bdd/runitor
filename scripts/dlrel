#!/usr/bin/env bash
# Copyright (c) Berk D. Demir and the runitor contributors.
# SPDX-License-Identifier: 0BSD
set -euo pipefail

# Download a release from GitHub
#
# Arguments:
# - list: list release names
# - latest: download the latest non-prerelease release
# - vX.X.X: download release vX.X.X

PROJECT="bdd/runitor"
API_RELEASES="https://api.github.com/repos/${PROJECT}/releases"
DL_URL_BASE="https://github.com/${PROJECT}/releases/download"

rel="${1-}"
case "${rel}" in
  ls|list) rel="list" ;;
  latest) relpath="latest" ;;
  v*) relpath="tags/${rel}" ;;
  *)
    echo "usage: $0 list|latest|vX.X.X [os [arch]]" >&2
    exit 64 # EX_USAGE
esac

if [[ ${rel} == "list" ]]; then
  curl --proto '=https' --tlsv1.2 -LSsf "${API_RELEASES}" | jq -r  '.[].tag_name'
  exit 0
fi

# platform specification as "-$os-$arch" in the filename.
if (($# > 1)); then
  platspec="-${2-}-${3-}"
else
  platspec="runitor-" # something to match every platform binary
fi

# Create a brace expansion URL list for curl from release asset download URLs.
# e.g. {url1,url2,url3,...}
asset_dl_urls_for_curl=$(
  curl --proto '=https' --tlsv1.2 -LSsf "${API_RELEASES}/${relpath}" \
    | jq --raw-output --arg dl_url_base "${DL_URL_BASE}" --arg platspec "${platspec}" \
    '
      .tag_name as $tag
      |
      [.assets[].name | select(contains($platspec))] as $bins
      |
      if $bins | length > 0 then
        $bins
      else
        error("no matching asset for \($platspec)")
      end
      |
      ($bins + ["SHA256", "SHA256.sig"] | join(",")) as $files
      |
      "\($dl_url_base)/\($tag)/{\($files)}"
    '
)

if [[ -z ${DOWNLOAD_DIR-} ]]; then
  DOWNLOAD_DIR="github-release-${rel}"
fi
curl --proto '=https' --tlsv1.2 -LSsf -O \
  --output-dir "${DOWNLOAD_DIR}" \
  --create-dirs \
  "${asset_dl_urls_for_curl}"

# If release has a SHA256 file, verify the downloads as well.
if [[ -r ${DOWNLOAD_DIR}/SHA256.sig ]]; then
  verify="$(dirname "$0")/verify"
  if [[ -x ${verify} ]]; then
    "${verify}" "${DOWNLOAD_DIR}"
  fi
fi
