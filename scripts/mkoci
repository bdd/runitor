#!/usr/bin/env bash
set -eou pipefail

##
# /!\ THIS SCRIPT IS INTENDED FOR MAINTAINER USE ONLY /!\
#
# == Prep on an amd64 machine for binfmt backed multi-arch image building
# % sudo podman run --privileged --rm tonistiigi/binfmt --install arm,arm64
#
# == Business
# % RELEASE=vX.Y.Z scripts/mkoci build
# % RELEASE=vX.Y.Z scripts/mkoci push
#
# == Cleanup
# % sudo podman run --privileged --rm tonistiigi/binfmt --uninstall arm,arm64
##

if [[ -z ${RUNTIMES-} ]]; then
  RUNTIMES=(alpine ubuntu debian)
else
  read -ra RUNTIMES <<< "${RUNTIMES//,/ }"
fi

if [[ -z ${DEFAULT_RUNTIME-} ]]; then
  # 'runitor:latest' and 'runitor:vX.Y.Z' will be tagged to 'runitor:<runtime>'
  DEFAULT_RUNTIME="ubuntu"

  if ! [[ $(IFS=%; echo "%${RUNTIMES[*]}%") =~ %${DEFAULT_RUNTIME}% ]]; then
    echo "DEFAULT_RUNTIME=${DEFAULT_RUNTIME} is not in RUNTIMES=$(IFS=,; echo "${RUNTIMES[*]}")" >&2
    exit 1
  fi
fi

if [[ -z ${PLATFORMS-} ]]; then
  PLATFORMS="linux/amd64,linux/arm64/v8,linux/arm/v7"
fi

build() {
  local rt rel_ts

  # Use release tag's author date as the image and filesystem timestamp for
  # reproducible builds.
  rel_ts=$(git log -1 --format=%at "${RELEASE}")

  for rt in "${RUNTIMES[@]}"; do
    rel_manifest="runitor:${RELEASE}-${rt}"

    if podman manifest exists "${rel_manifest}"; then
      echo "manifest ${rel_manifest} already exists. deleting..." >/dev/stderr
      podman manifest rm "${rel_manifest}"
    fi

    podman build \
      --pull=newer \
      --omit-history \
      --timestamp="${rel_ts}" \
      --platform "${PLATFORMS}" \
      --build-arg RELEASE="${RELEASE}" \
      --build-arg RELBUILD="${RELBUILD-${RELEASE}}" \
      --build-arg RUNTIME_IMG="docker.io/library/${rt}:latest" \
      --manifest "${rel_manifest}" \
      .
  done
}

tag() {
  tag_short
  tag_default
}

tag_rt_shorts() {
  local rt

  for rt in "${RUNTIMES[@]}"; do
    rel_manifest="runitor:${RELEASE}-${rt}"
    rel_major_manifest="runitor:${RELEASE_MAJOR}-${rt}"
    rti_manifest="runitor:${rt}"

    podman image tag "${rel_manifest}" "${rel_major_manifest}"
    podman image tag "${rel_manifest}" "${rti_manifest}"
  done
}

tag_default_rt() {
  podman image tag "runitor:${DEFAULT_RUNTIME}" "runitor:${RELEASE}"
  podman image tag "runitor:${DEFAULT_RUNTIME}" "runitor:${RELEASE_MAJOR}"
  podman image tag "runitor:${DEFAULT_RUNTIME}" "runitor:latest"
}

all_tags() {
  local -n tags_arr=$1

  local rt
  for rt in "${RUNTIMES[@]}"; do
    rel_manifest="runitor:${RELEASE}-${rt}"
    rel_major_manifest="runitor:${RELEASE_MAJOR}-${rt}"
    rti_manifest="runitor:${rt}"

    tags_arr+=("${rel_manifest}" "${rel_major_manifest}" "${rti_manifest}")
  done

  tags_arr+=("runitor:${RELEASE}" "runitor:${RELEASE_MAJOR}" "runitor:latest")
}

push() {
  local manifests=()

  if (( $# > 0 )); then
    manifests+=("$@")
  else
    all_tags manifests
  fi

  local registry_namespace
  for registry_namespace in "docker.io/runitor" "ghcr.io/bdd"; do
    for manifest in "${manifests[@]}"; do
      echo "Pushing: ${manifest} to ${registry_namespace}"
      podman manifest push "${manifest}" "docker://${registry_namespace}/${manifest}"
    done
  done
}

clean() {
  local manifests=()

  for rt in "${RUNTIMES[@]}"; do
    manifests+=("runitor:${RELEASE}-${rt}" "runitor:${rt}")
  done

  manifests+=("runitor:${RELEASE}" "runitor:latest")

  # Unlike `podman image rm`, manifest doesn't have an `--ignore` flag.
  for manifest in "${manifests[@]}"; do
    if podman manifest exists "${manifest}"; then
      podman manifest rm "${manifest}"
    fi
  done
}

RELEASE_MAJOR=${RELEASE%%.*}

case "$1" in
  clean) clean ;;
  build) build ;;
  tag_rt_shorts) tag_rt_shorts ;;
  tag_default_rt) tag_default_rt ;;
  push) shift; push "$@" ;;

  release)
    build
    tag_rt_shorts
    tag_default_rt
    push
    ;;

  tags)
    declare -a tags
    all_tags tags
    echo "${tags[@]}" | tr ' ' '\n'
    ;;
  *)
    echo "usage: $0 build | tag | push | clean" >&2
    exit 64 # EX_USAGE
esac
